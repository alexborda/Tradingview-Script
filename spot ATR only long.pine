//@version=6
strategy('Spot ATR Strategy Long Only', overlay=true)

// *** Cálculo del ATR ***
atr_length = input(14, title='Longitud del ATR')
atr_mult = input(1.2, title='ATR Multiplicador')
atr_value = ta.atr(atr_length)
atr_lower = close - atr_value * atr_mult
atr_filter_long = close > atr_lower
volatility_factor = atr_value / close

// *** Cálculo del MACD ***
[macd_line, signal_line, _] = ta.macd(close, 12, 26, 9)
macd_filter_long = macd_line > signal_line
macd_slope = macd_line - macd_line[3] // Diferencia de MACD actual vs hace 3 velas
macd_trend_up = macd_slope > 0

// *** Cálculo del ADX Dinámico ***
adx_length = input(14, title='Longitud del ADX')
adx_threshold_base = input(25, title="Umbral Base de ADX")
adx_smoothing = input(14, title="Suavizado ADX")
[diplus, diminus, adx] = ta.dmi(adx_length, adx_smoothing)
adx_threshold = adx_threshold_base * (1 + volatility_factor)  // ADX dinámico dependiendo de la volatilidad

// *** Cálculo del Volumen Relativo ***
vol_length = input(24, title="Longitud del Volumen")
vol_threshold = input(1.1, title="Factor de Volumen Mínimo")
vol_avg = ta.ema(volume, vol_length)  // Media del volumen
vol_relative = volume / vol_avg  // Relación volumen actual/promedio
vol_filter = vol_relative > vol_threshold  // Confirmación de volumen

// *** Gestión de Riesgo ***
qty_percent = input(50, title="Porcentaje de los fondos para operar") / 100  // tamaño en Porcentaje
max_exposure = strategy.equity * qty_percent  // Máximo del capital total en riesgo
max_qty = max_exposure / close  // Control del tamaño de la posición
min_asset_qty = input(0.000011, title="Cantidad mínima del activo")
min_qty = min_asset_qty * close  // Convertimos el mínimo en USDT con el precio actual

// *** Control de Riesgo ***
risk_percent = math.max(qty_percent, 1 / (atr_value * atr_mult))
capital = strategy.equity * risk_percent
final_qty = math.min(math.max(capital / close, min_qty), max_qty)


// *** Cálculo del Trailing Stop, Take Profit y Break-Even ***
var bool long_break_even = false
var bool long_trailing_active = false

var float long_stop_price = na
var float long_take_profit = na
var float price_entry = nz(strategy.position_avg_price, close) // price_entry se actualiza solo cuando hay posición (Consideración #6)

trailing_mult = input(1.2, title="Trailing Stop Multiplicador")
break_even_mult = input(1.3, title="Break-Even Multiplicador")
take_profit_mult = input(1.8, title="Take Profit Multiplicador")

float tp_factor = adx > adx_threshold ? take_profit_mult * 1.5 : take_profit_mult
float dynamic_trailing_mult = trailing_mult * (1 + volatility_factor)

if strategy.position_size > 0
    price_entry := strategy.position_avg_price
    long_take_profit := price_entry + atr_value * tp_factor * (1 + volatility_factor)

    if not long_break_even and close > price_entry + atr_value * break_even_mult
        long_break_even := true
        long_stop_price := price_entry
        long_trailing_active := true

    if long_trailing_active
        long_stop_price := math.max(long_stop_price, close - atr_value * dynamic_trailing_mult)

// *** Condiciones de Entrada ***
entry_long = macd_trend_up and atr_filter_long and vol_filter and adx > adx_threshold

// Función para enviar la orden a la API a través del Webhook
webhook_secret = input.string("default_secret", title="API Secret del hebhook")
order_type = input.string("limit", title="Tipo de Orden", options=["limit", "market", "stop_limit", "stop_market"])

// Detectando tipos de mercado
is_spot = syminfo.currency == syminfo.basecurrency
market_type = "spot" // Establecemos directamente el tipo de mercado como "spot"

// Función para enviar la orden a la API a través del Webhook (Optimización #3 y #4 - Sin stop_loss inicial)
sendTrade(secret, category, symbol, side, order_type, qty, price, stop_loss) =>
    payload = '{"secret": "' + secret + '", ' +
              '"category": "' + market_type + '", ' +
              '"symbol": "' + symbol + '", ' +
              '"side": "' + side + '", ' +
              '"order_type": "' + order_type + '", ' +
              '"qty": "' + str.tostring(qty) + '", ' +
              '"price": "' + str.tostring(price) + '", ' + 
              '"}'
    alert(payload, alert.freq_all)

// *** Control de Posiciones y Capital Disponible ***
can_trade = strategy.position_size == 0 and strategy.equity >= min_qty and market_type == "spot" // No hay posición activa y hay saldo suficiente

// *** Lógica de Entrada con Control de Posiciones ***
if can_trade
    if entry_long
        var float limit_buy_price = close // Precio límite para órdenes limit (Optimización #3)

        // Considera ajustar el precio según el order_type (Optimización #5)
        float order_price = order_type == "market" ? close : order_type == "limit" ? limit_buy_price : close // Precio por defecto

        sendTrade(webhook_secret, market_type, syminfo.ticker, "Buy", order_type, final_qty, price_entry, long_stop_price)
        strategy.entry("Long", strategy.long, qty=final_qty) // No establecemos stop loss en la entrada de TradingView

// *** Salidas ***
if strategy.position_size > 0
    stop_loss_level = long_break_even ? long_stop_price : long_stop_price // Si break-even, usa el stop de break-even, sino usa el trailing stop
    take_profit_level = long_take_profit

    strategy.exit("Exit Long", from_entry="Long", stop=stop_loss_level, limit=take_profit_level)