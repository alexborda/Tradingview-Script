//@version=6
strategy('Spot ATR Strategy', 
     overlay=true,
     commission_type=strategy.commission.percent,
     commission_value=0.1,
     slippage=1,
     initial_capital=10000)

import alexborda/AlexLib/8 as lib

// --- Grupos de Inputs ---
string G_STRAT = "1. Filtros Estrategia"
string G_ENTRY = "2. Lógica Entrada"
string G_EXIT  = "3. Lógica Salida Peak"
string G_ATR   = "4. Configuración ATR"
string G_SIZE  = "5. Tamaño Posición"
string G_RISK  = "6. Gestión Riesgo & TSL"
string G_ORD   = "7. Configuración Órdenes"
string G_VIS   = "8. Visuales y Depuración"
string TSL_PRICE    = "ATR (desde Precio)"
string TSL_LOWEST   = "ATR (desde Mínimo Reciente)"
string TSL_PERCENT  = "Porcentaje (desde Cierre)"

// Inputs Filtros Estrategia
emaLen          = input.int(15, "EMA Corta", group=G_STRAT, minval=1, tooltip="EMA rápida para salida y referencia a corto plazo")
htf             = input.timeframe("240", "EMA Larga TF", group=G_STRAT, tooltip="Temporalidad de EMA lenta: 'D'=Diario, '240'=4h")
useAdxFilter    = input.bool(true, "Usar ADX", group=G_STRAT, tooltip="Filtro ADX para entradas")
adxLen          = input.int(14, "ADX Longitud", group=G_STRAT, minval=1, tooltip="Períodos para ADX")
adxSmooth       = input.int(14, "ADX Suavizado", group=G_STRAT, minval=1, tooltip="Suavizado interno del ADX")
adxThresholdBase= input.float(15.0, "ADX Umbral Base", group=G_STRAT, minval=0, tooltip="Nivel mínimo base ADX")
useVolFilter    = input.bool(true, "Usar Volumen", group=G_STRAT, tooltip="Filtro volumen para entradas")
volLen          = input.int(20, "Vol MA Len", group=G_STRAT, minval=1, tooltip="Períodos EMA volumen")
volFactor       = input.float(1.1, "Vol Factor Min", group=G_STRAT, minval=0, step=0.1, tooltip="Multiplicador EMA volumen")
useLrTrendFilter= input.bool(false, "Filtro LR Tendencia", group=G_STRAT, tooltip="Usar filtro tendencia con LR")
lrTrendLen      = input.int(20, "LR Tendencia Len", group=G_STRAT, minval=2, tooltip="Barras para LR como filtro tendencia")

// Inputs Lógica Entrada
retrBars        = input.int(5, title="Retroceso Mín Barras bajo EMA Corta", group=G_ENTRY, minval=1, tooltip="Número mínimo de barras consecutivas que el precio debe cerrar por debajo de la EMA corta para considerar un retroceso.")
lrEntryLen      = input.int(10, "LR Entrada Len", group=G_ENTRY, minval=2, tooltip="Barras para Regresión Lineal en entrada (no usada actualmente en lógica executeBuy)")

// Inputs Lógica Salida Peak
exitLookback    = input.int(7, "Salida Lookback Máx", group=G_EXIT, minval=2, tooltip="Barras hacia atrás para máximo cierre en Salida Peak")
exitEmaBars     = input.int(5, "Min Barras s/EMA Salida Peak", group=G_EXIT, minval=2, tooltip="Mínimo barras sobre EMA para Salida Peak")
volConfirmExit  = input.bool(true, "Vol Confirma Salida Peak", group=G_EXIT, tooltip="Requiere volumen alto para Salida Peak")

// Inputs ATR
atrLen          = input.int(14, "ATR Longitud", group=G_ATR, minval=1, tooltip="Períodos para Average True Range")
atrMultSL       = input.float(2.5, "ATR Mult SL Inicial", group=G_ATR, minval=0.1, step=0.1, tooltip="Multiplicador ATR para Stop Loss Inicial")

// Inputs Tamaño Posición
equityPct       = input.float(0.99, "% Capital x Trade", group=G_SIZE, minval=0.01, maxval=1.0, step=0.001, tooltip="Porcentaje del capital (0.001-1) a usar por operación.")
minQty          = input.float(0.00011, "Activo Cantidad Mínima", group=G_SIZE, step=0.0001, minval=0.00011, tooltip="Cantidad mínima de orden del exchange.")

// Inputs Gestión Riesgo & TSL
minSLPct        = input.float(0.005, "SL Mínimo %", group=G_RISK, minval=0.001, maxval=0.10, step=0.001, tooltip="Distancia mínima SL en % del precio (ej. 0.5 para 0.5%).")
maxDrawdownPct  = input.float(0.20, "Máx Drawdown Permitido %", group=G_RISK, minval=0.01, maxval=1, step=0.001, tooltip="Máximo drawdown porcentual permitido antes de detener nuevas operaciones.")
tpMult          = input.float(3.0, "TP Mult ATR", group=G_RISK, minval=0.1, step=0.1, tooltip="Multiplicador ATR para Take Profit")
beMult          = input.float(1.5, "BE Mult ATR", group=G_RISK, minval=0.1, step=0.1, tooltip="Multiplicador ATR para Break-Even")
tslMethod       = input.string(TSL_PRICE, "TSL Método", options=[TSL_PRICE, TSL_LOWEST, TSL_PERCENT], group=G_RISK, tooltip="Elige el método de cálculo del Trailing Stop Loss (TSL).")
tslSource       = input.string("low", "TSL Fuente [ATR Precio]", options=["close", "low"], group=G_RISK, tooltip="Precio base (Close o Low) si usas 'ATR (desde Precio)'.")
tslMult         = input.float(2.0, "TSL Mult ATR [Métodos ATR]", group=G_RISK, minval=0.1, step=0.1, tooltip="Multiplicador ATR para TSL.")
tslLookback     = input.int(10, "TSL Lookback [ATR Mínimo]", group=G_RISK, minval=2, tooltip="Período para buscar el mínimo para TSL.")
tslPct          = input.float(0.03, "TSL % [Porcentaje]", group=G_RISK, minval=0.005, maxval=0.20, step=0.001, tooltip="Porcentaje fijo desde cierre para TSL (ej. 3 para 3%).")
lrTslLen        = input.int(15, "TSL LR Longitud", group=G_RISK, minval=2, tooltip="Período para Regresión Lineal usada en TSL (si se usa en lib.calcTrailingStop).")

// Inputs Configuración de Órdenes
orderType         = input.string("market", "Tipo Orden Entrada", options=["limit", "market"], group=G_ORD, tooltip="Tipo de orden para entradas.")
priceOffsetPips   = input.int(0, "Límite Offset Pips", group=G_ORD, minval=0, tooltip="Para órdenes Límite: pips/ticks bajo precio actual (0=cierre).")

// Inputs Visuales y Depuración
enableWebhookAlerts = input.bool(false, "Activar Alertas Webhook", group=G_VIS, tooltip="Enviar alertas por webhook para ejecuciones de trade.")
webhookUrl          = input.string("", "Webhook URL", group=G_VIS, tooltip="URL para enviar las alertas webhook.")
showDebugPlots   = input.bool(false, title="Ver Plots Debug?", group=G_VIS, tooltip="Activa/Desactiva la visualización de plots técnicos adicionales.")
showDebugLabels  = input.bool(true, title="Ver Labels Debug?", group=G_VIS, tooltip="Activa/Desactiva la visualización de etiquetas con información del estado.")
bgcolorActive     = input.bool(true, title="Resaltar Fondo Ejecución?", group=G_VIS, tooltip="Activa/Desactiva el resaltado de fondo en las barras de ejecución.")


// *** Variables Globales de Estado ***
var float EntryPrice          = na
var float stopLossPrice       = na
var float takeProfitPrice     = na
var bool  breakEvenActive     = false
var bool  trailingActive      = false
var float lowestLowForTsl     = na
var float peakEquity          = strategy.initial_capital
var bool  riskLimitReached    = false

// *** Cálculos de Indicadores ***
float currentEma = ta.ema(close, emaLen)
float htfEma = request.security(syminfo.tickerid, htf, ta.ema(close, emaLen)[1], lookahead=barmerge.lookahead_off)
bool isBullish = close > htfEma

// ATR - Optimizado
float trueRange    = ta.tr
float atrFromLib   = ta.atr(atrLen)
float smaOfTR      = ta.sma(trueRange, atrLen)
float atrCurrent   = na(atrFromLib) or atrFromLib <= 0 ? (na(smaOfTR) or smaOfTR <= 0 ? close * 0.01 : smaOfTR) : atrFromLib

// Distancia SL con mínimo configurable
float slDist = math.max(atrCurrent * atrMultSL, close * (minSLPct / 100.0))

bool adxPass = lib.validateADX(adxLen, atrCurrent, adxSmooth, adxThresholdBase, useAdxFilter)
bool volPass = lib.validateVolume(volume, volLen, volFactor, useVolFilter)
bool lrPass = true
float lrSlopeValue = 0.0
if useLrTrendFilter
    [tempLrPass, tempLrSlope] = lib.validateLR(close, lrTrendLen, true)
    lrPass := tempLrPass
    lrSlopeValue := tempLrSlope
else
    lrPass := true
    lrSlopeValue := 0.0

float lrTslVal     = ta.linreg(low, lrTslLen, 0)

int barsBelowShortEma = ta.barssince(close > currentEma)
bool crossoverShortEma = ta.crossover(close, currentEma)

float highestCloseVal = ta.highest(close, exitLookback)
bool isHighestCloseCond = close == highestCloseVal
int barsAboveShortEma = ta.barssince(close <= currentEma)
bool stayedAboveShortEma = barsAboveShortEma >= exitEmaBars
bool volumeConfirmsPeak = not volConfirmExit or (useVolFilter and volPass)
bool peakExitCond = isHighestCloseCond and stayedAboveShortEma and volumeConfirmsPeak

// Actualizar equity peak y calcular drawdown
if strategy.equity > peakEquity // Solo actualizar si el equity actual es mayor
    peakEquity := strategy.equity
float currentDrawdown = peakEquity - strategy.equity
float drawdownPct = peakEquity > 0 ? (strategy.equity - peakEquity) / peakEquity * 100 : 0.0
if drawdownPct >= maxDrawdownPct and not riskLimitReached // Si el drawdown supera el límite Y no se había alcanzado antes
    riskLimitReached := true
    alert("Límite de Drawdown Máximo (" + str.tostring(maxDrawdownPct) + "%) Alcanzado. Deteniendo nuevas operaciones.", alert.freq_once_per_bar) // Alerta una vez
if riskLimitReached and drawdownPct < (maxDrawdownPct * 0.5) // Ejemplo: recupera la mitad del drawdown
    riskLimitReached := false
    alert("Límite de Drawdown Reseteado. Operaciones reanudadas.", alert.freq_once_per_bar)

// *** Gestión de Posición ***
equity = strategy.equity
maxEquityToRisk = equity * equityPct // % del equity a usar

// Cálculo de Cantidad
float calculatedQtyRaw = 0.0 // Renombrado para claridad
if close > 0
    calculatedQtyRaw := maxEquityToRisk / close // Siempre usa % del equity
else
    calculatedQtyRaw := 0.0

// Asegurar Cantidad Mínima
qtyAfterMinConstraint = na(calculatedQtyRaw) ? na : math.max(minQty, calculatedQtyRaw)

// Redondeo Final
// --- CAMBIO: Eliminada la referencia a lib.calcPositionSize, ahora se calcula aquí ---
finalPositionQty = na(qtyAfterMinConstraint) ? na : math.round_to_mintick(qtyAfterMinConstraint)

// Pre-calcular TSL lowest low si se usa ese método
if tslMethod == TSL_LOWEST
    lowestLowForTsl := ta.lowest(low, tslLookback)
else
    lowestLowForTsl := na

// *** GESTIÓN DE TRADE (SL/TP/TSL) ***
float breakEvenActivationPrice = na
float potentialNewStopLevel = na
bool beActivatedThisBar = false
bool tslUpdatedThisBar = false

if strategy.position_size > 0
    EntryPrice := strategy.position_avg_price
    
    takeProfitPrice := lib.calcTP(EntryPrice, atrCurrent, tpMult, 2, 5)
    breakEvenActivationPrice := lib.calcBELevel(EntryPrice, atrCurrent, beMult, 2, 5)
    potentialNewStopLevel := lib.calcTSL(close, atrCurrent, tslMult, tslMethod, tslSource, lrTslVal, tslPct, lrSlopeValue, 2, 5)
    
    beActivatedThisBar := false
    tslUpdatedThisBar := false

    if not na(breakEvenActivationPrice) and beMult > 0 and not breakEvenActive and close > breakEvenActivationPrice
        breakEvenActive := true
        trailingActive := true
        if not na(EntryPrice)
            float newSlVal = lib.round(EntryPrice, 2, 5)
            if na(stopLossPrice) or newSlVal != stopLossPrice
                stopLossPrice := newSlVal
                beActivatedThisBar := true
    
    if trailingActive and not na(potentialNewStopLevel) and (na(stopLossPrice) or potentialNewStopLevel > stopLossPrice)
        stopLossPrice := potentialNewStopLevel
        tslUpdatedThisBar := true

// *** CONDICIONES DE ENTRADA ***
bool entryTrigger = (barsBelowShortEma >= retrBars and crossoverShortEma) and isBullish and slDist > 0 and adxPass and volPass and lrPass

// *** LÓGICA DE ENTRADA ***
bool qtyOk     = not na(finalPositionQty) and finalPositionQty >= minQty
bool costOk    = not na(finalPositionQty) and not na(close) and close > 0
float estCostVal  = costOk ? lib.round(finalPositionQty * close, 2, 5) : na
bool equityOk = not na(estCostVal) and equity > estCostVal
bool canEnterTrade = strategy.position_size == 0 and qtyOk and equityOk and not riskLimitReached

// *** EJECUTAR ENTRADA ***
if entryTrigger and canEnterTrade
    float entryPriceExec = na
    if orderType == 'limit'
        float limitOffsetVal = priceOffsetPips * syminfo.mintick
        entryPriceExec := lib.round((limitOffsetVal == 0 ? close : close - limitOffsetVal), 2, 5)

    float initialSl = na
    float slBasePrice = orderType == 'limit' ? (not na(entryPriceExec) ? entryPriceExec : close) : close
    if not na(slBasePrice) and not na(slDist)
        initialSl := lib.round(slBasePrice - slDist, 2, 5)

    if not na(initialSl)
        strategy.entry("Compra", strategy.long, qty=finalPositionQty, limit=entryPriceExec)

        if strategy.position_size[1] == 0
            stopLossPrice := initialSl
            takeProfitPrice := na
            breakEvenActive := false
            trailingActive := false
            peakEquity := equity

        if enableWebhookAlerts and webhookUrl != "" and strategy.position_size[1] == 0
            string entryMsg = '{ "symbol": "' + syminfo.tickerid + '", "side": "buy", "qty": ' + str.tostring(finalPositionQty) + ', "type": "' + orderType + '"'
            if orderType == 'limit' and not na(entryPriceExec)
                entryMsg += ', "price": ' + str.tostring(entryPriceExec)
            entryMsg += ' }'
            alert(entryMsg + "{{webhook=" + webhookUrl + "}}", alert.freq_once_per_bar_close)

// *** CONDICIONES DE SALIDA ***
if strategy.position_size > 0 and not na(stopLossPrice)
    float actualLimit = (not trailingActive and isBullish) ? takeProfitPrice : na
    strategy.exit(id='Venta SL/TP', from_entry='Compra', stop=stopLossPrice, limit=actualLimit, comment_profit='TP Hit', comment_loss='SL/BE/TSL Hit')
    // Webhook para strategy.exit (si se activa)
    if enableWebhookAlerts and webhookUrl != ""
        // Nota: El mensaje de alerta aquí es genérico, ya que no sabemos si fue SL o TP
        // Podrías usar alertcondition separadas si necesitas diferenciar para el webhook
        string exitMsg = '{ "symbol": "' + syminfo.tickerid + '", "side": "sell", "qty": ' + str.tostring(strategy.position_size) + ', "type": "market", "reason": "{{strategy.order.comment}}" }' // Usa placeholder
        alert(exitMsg + "{{webhook=" + webhookUrl + "}}", alert.freq_once_per_bar_close)

if strategy.position_size > 0 and peakExitCond and not trailingActive and isBullish
    strategy.close(id='Compra', comment='Peak Exit')
    if enableWebhookAlerts and webhookUrl != ""
        string peakExitMsg = '{ "symbol": "' + syminfo.tickerid + '", "side": "sell", "qty": ' + str.tostring(strategy.position_size) + ', "type": "market", "reason": "Peak Exit" }'
        alert(peakExitMsg + "{{webhook=" + webhookUrl + "}}", alert.freq_once_per_bar_close)

if strategy.position_size > 0 and not isBullish
    strategy.close(id='Compra', comment='Trend Exit (HTF)')
    if enableWebhookAlerts and webhookUrl != ""
        string trendExitMsg = '{ "symbol": "' + syminfo.tickerid + '", "side": "sell", "qty": ' + str.tostring(strategy.position_size) + ', "type": "market", "reason": "Trend Exit HTF" }'
        alert(trendExitMsg + "{{webhook=" + webhookUrl + "}}", alert.freq_once_per_bar_close)

// *** VISUALIZACIÓN ***
// EMAs
plot(currentEma, "EMA Corta", color.new(color.yellow, 0), 1)
plot(htfEma, "EMA HTF", color.new(color.aqua, 0), 1)

// Stop Loss
plot(strategy.position_size > 0 ? stopLossPrice : na, "Stop Loss", color.new(color.red, 0), 2, plot.style_cross)
// Take Profit
plot(strategy.position_size > 0 and not trailingActive ? takeProfitPrice : na, "Take Profit", color.new(color.green, 0), 2, plot.style_cross)

// Plots de Depuración (activar/desactivar según necesidad)
plot_entryTrigger = input.bool(false, "Plot  entryTrigger", group="Debug Plots")
plotshape(plot_entryTrigger and entryTrigger, title="Execute Buy", style=shape.triangleup, location=location.bottom, color=color.new(color.green, 0), size=size.auto)

plot_canTrade = input.bool(false, "Plot canTrade", group="Debug Plots")
// plotshape(plot_canTrade and canTrade, title="Can Trade", style=shape.triangledown, location=location.top, color=color.new(color.blue, 0), size=size.small) // canTrade variable removed

plot_lrFilter = input.bool(false, "Plot lrFilter", group="Debug Plots")
bgcolor(plot_lrFilter and useLrTrendFilter ? color.new(color.purple, 90) : na, title="LR Filter")

plot_adxfilter = input.bool(false, "Plot adxfilter", group="Debug Plots")
bgcolor(plot_adxfilter and useAdxFilter ? color.new(color.orange, 90) : na, title="ADX Filter")

plot_volfilter = input.bool(false, "Plot volfilter", group="Debug Plots")
bgcolor(plot_volfilter and useVolFilter ? color.new(color.teal, 90) : na, title="Vol Filter")

plot_bullish = input.bool(false, "Plot bullish", group="Debug Plots")
// bgcolor(plot_bullish and bullish ? color.new(color.lime, 90) : na, title="Bullish Filter") // bullish variable removed

plot_peakExit = input.bool(false, "Plot peakExit", group="Debug Plots")
bgcolor(plot_peakExit and peakExitCond ? color.new(color.red, 90) : na, title="Peak Exit")
plot_peakExitEma = input.bool(false, "Plot peakExitEma", group="Debug Plots")   