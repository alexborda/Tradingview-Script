//@version=6
strategy('Spot ATR Strategy', // Nombre actualizado
     overlay=true,
     commission_type=strategy.commission.percent,
     commission_value=0.1,
     slippage=1,
     initial_capital=10000)

// --- Importar librería Personal (ASEGÚRATE QUE LOS DATOS SEAN CORRECTOS) ---
import alexborda/AlexLib/1 as lib

// *** Inputs de Estrategia ***
// Grupos
string G_STRAT = "1. Filtros de Estrategia"
string G_ENTRYEXIT = "1.1 Lógica Entrada/Salida"
string G_ADX = "1.2 Filtro ADX"
string G_VOL = "1.3 Filtro Volumen"
string G_ATR = "2. Configuración ATR"
string G_SIZE = "3. Tamaño de Posición"
string G_MGMT = "4. Gestión Trade & TSL" // Grupo renombrado
string G_ORD = "5. Configuración de Órdenes"
string G_VIS = "6. Visuales y Depuración"

// Inputs Filtros de Estrategia
ema_length         = input.int(10, title="EMA Corta Longitud", group=G_STRAT, minval=1, tooltip="Período de la Media Móvil Exponencial (EMA) rápida, usada para lógica de salida y como referencia de corto plazo.")
HigherTimeframe    = input.timeframe("D", title="EMA Larga TF", group=G_STRAT, tooltip="Temporalidad de la EMA lenta (largo plazo) para filtrar tendencia general (ej. 'D'=Diario, '240'=4 Horas). La entrada solo ocurre si el precio está sobre esta EMA.")

// Inputs Lógica Entrada/Salida
entry_lookback     = input.int(7, title="Entrada Lookback Mínimo", group=G_ENTRYEXIT, minval=2, tooltip="Número de barras hacia atrás para buscar el mínimo más bajo (`low`) como parte de la señal de entrada trigger.")
entry_wait_bars    = input.int(3, title="Número de barras a esperar", group=G_ENTRYEXIT, minval=0, tooltip="Número de barras a esperar después de la señal 'Trigger' antes de buscar la vela de reversión (`close > open`) para ejecutar la compra.")

exit_lookback      = input.int(7, title="Salida Lookback Máximo", group=G_ENTRYEXIT, minval=2, tooltip="Número de barras hacia atrás para buscar el cierre más alto (`close`) para la condición de Salida Peak.")
exit_ema_bars      = input.int(5, title="Salida Mín Barras s/EMA", group=G_ENTRYEXIT, minval=2, tooltip="Número mínimo de barras consecutivas que el precio debe cerrar sobre la EMA corta para activar la Salida Peak.")

// Inputs ADX
adx_len            = input.int(14, title='ADX Longitud', group=G_ADX, minval=1, tooltip="Número de períodos para el cálculo del Average Directional Index (ADX).")
adx_smooth         = input.int(14, title='ADX Suavizado', group=G_ADX, minval=1, tooltip="Número de períodos para el suavizado interno del ADX (usualmente igual a la Longitud ADX).")
adx_threshold_base = input.float(15.0, title='ADX Umbral Base', group=G_ADX, minval=0, tooltip="Nivel mínimo base que debe superar el ADX para considerar la entrada (se ajusta dinámicamente con la volatilidad ATR).")

// Inputs Volumen
vol_len            = input.int(20, title="Volumen Longitud MA", group=G_VOL, minval=1, tooltip="Número de períodos para la Media Móvil Exponencial (EMA) del volumen.")
vol_factor         = input.float(1.1, title="Volumen Factor Mínimo", group=G_VOL, minval=0, tooltip="Factor multiplicador de la EMA de volumen. El volumen actual debe superar (EMA Volumen * Factor) para considerar la entrada.", step=0.1)

// Inputs ATR
atr_len            = input.int(14, title='ATR Longitud', group=G_ATR, minval=1, tooltip="Número de períodos para el cálculo del Average True Range (ATR).")
atr_mult           = input.float(1.2, title='ATR Mult SL Inicial', group=G_ATR, minval=0.1, tooltip="Multiplicador del ATR para calcular la distancia del Stop Loss inicial desde el precio estimado de entrada.", step=0.1)

// Inputs Tamaño de Posición
eqty_type          = input.string(defval="Porcentaje", title="Tipo Tamaño", options=["Porcentaje","ATR"], group=G_SIZE, tooltip="Método para calcular el tamaño de la posición: 'Porcentaje' (usa % Máx Equity) o 'ATR' (usa % Riesgo y distancia SL).")
eqty_percent       = input.float(99, title='Capital % Máx x Trade', group=G_SIZE, minval=1, maxval=100, tooltip="Máximo porcentaje del capital total permitido para usar en una sola operación.") / 100
risk_percent       = input.float(100, title='ATR % Riesgo x Trade', group=G_SIZE, minval=0.1, maxval=100, tooltip="Porcentaje del capital total a arriesgar en una operación, usado solo si 'Tipo Tamaño' es 'ATR'.") / 100
min_qty            = input.float(0.00011, title='Activo Cantidad Mínima', group=G_SIZE, step=0.0001, minval=0.00011, tooltip="Cantidad mínima del activo base (ej. BTC) permitida por el exchange para colocar una orden.")

// Inputs Gestión Trade & TSL
string TSL_METHOD_ATR_PRICE = "ATR (desde Precio)"
string TSL_METHOD_ATR_LOWEST = "ATR (desde Mínimo Reciente)"
string TSL_METHOD_PERCENT = "Porcentaje (desde Cierre)"
tsl_method_input = input.string(TSL_METHOD_PERCENT, "TSL Método", options=[TSL_METHOD_ATR_PRICE, TSL_METHOD_ATR_LOWEST, TSL_METHOD_PERCENT], group=G_MGMT, tooltip="Elige el método de cálculo del Trailing Stop Loss (TSL). Las opciones explican cómo se calcula.")
tsl_source       = input.string("low", "TSL Fuente [ATR Precio]", options=["close", "low"], group=G_MGMT, tooltip="Precio base (Close o Low) para el cálculo del TSL cuando el método es 'ATR (desde Precio)'.")
trl_mult         = input.float(1.9, title='TSL Mult ATR', group=G_MGMT, minval=0.1, tooltip="Multiplicador del ATR usado para calcular la distancia del TSL en los métodos basados en ATR.", step=0.1)
tsl_lookback     = input.int(10, "TSL Lookback Mínimo", group=G_MGMT, minval=2, tooltip="Número de barras hacia atrás para buscar el mínimo (`low`) usado en el método TSL 'ATR (desde Mínimo Reciente)'.")
tsl_percent      = input.float(5.0, "TSL Porcentaje", group=G_MGMT, minval=0.1, tooltip="Distancia porcentual fija desde el cierre (`close`) usada para el TSL en el método 'Porcentaje'.") / 100.0
be_mult          = input.float(1.0, title='BE Multiplicador ATR', group=G_MGMT, minval=0.1, tooltip="Multiplicador del ATR desde la entrada. El precio debe superar (Entrada + ATR * Mult) para mover el SL a Break-Even.", step=0.1)
tp_mult          = input.float(1.7, title='TP Multiplicador ATR', group=G_MGMT, minval=0.1, tooltip="Multiplicador del ATR desde la entrada para calcular el nivel de Take Profit.", step=0.1)
ex_mult          = input.float(1.0, title='Exit Multiplicador', group=G_MGMT, minval=0.1, tooltip="Multiplicador añade un margen de tolerancia al precio para que no necesite tocar exactamente el mínimo anterior, sino que puede estar ligeramente por encima hasta un % más alto.", step=0.1)

// Inputs Configuración de Órdenes
order_type         = input.string("limit", title="Tipo Orden Entrada", options=["limit", "market"], group=G_ORD, tooltip="Tipo de orden a usar para las entradas (Market recomendado con entrada diferida).") // Default Market
price_offset_pips  = input.int(5, title='Límite Offset Pips', group=G_ORD, minval=0, tooltip="Para órdenes Límite: Número de pips/ticks por debajo del precio actual para colocar la orden. 0 usa el precio de cierre.")

// New Inputs for Webhook Alerts
enable_webhook_alerts = input.bool(false, title="Enable Webhook Alerts?", group=G_ORD, tooltip="Enable sending alerts for trade execution via webhooks.")
webhook_url = input.string("", title="Webhook URL", group=G_ORD, tooltip="The URL to send webhook alerts to.")

// Inputs Visuales y Depuración
show_debug_plots   = input.bool(false, title="Ver Plots Debug?", group=G_VIS, tooltip="Activa/Desactiva la visualización de plots técnicos adicionales para depuración.")
show_debug_labels  = input.bool(true, title="Ver Labels Debug?", group=G_VIS, tooltip="Activa/Desactiva la visualización de etiquetas con información detallada del estado y cálculos.")
bgcolor_active     = input.bool(true, title="Resaltar Fondo Ejecución?", group=G_VIS, tooltip="Activa/Desactiva el resaltado de fondo en las barras donde se ejecuta una entrada.")
// *** Variables Globales de Estado ***
var float   calculated_qty        = na
var float   final_qty             = na
var float   long_entry_price      = na
var float   long_sl_price         = na
var float   long_tp_price         = na
var bool    long_be_active        = false
var bool    long_trl_active       = false
var bool    entrySignalActive     = false
var int     barsSinceSignal       = 0
var float   lowestSinceSignal     = na

// *** Cálculos de Indicadores ***
// EMAs
ema_value         = ta.ema(close, ema_length)
float htfEmaValue = request.security(syminfo.tickerid, HigherTimeframe, ema_value[1], lookahead=barmerge.lookahead_off)
bool isBullish    = close > htfEmaValue

// ATR Robusto
float tr = ta.tr
float atr_from_ta = ta.atr(atr_len)
float sma_of_tr = ta.sma(tr, atr_len)
float atr_value = atr_from_ta
if na(atr_value) or atr_value <= 0
    atr_value := sma_of_tr
if na(atr_value) or atr_value <= 0
    atr_value := close * 0.02

// Distancia SL Inicial
initial_sl_dista   = atr_value * atr_mult
initial_sl_dista  := math.max(initial_sl_dista, close * 0.005)

// ADX
[di_plus, di_minus, adx] = ta.dmi(adx_len, adx_smooth)
float volatility_factor = close > 0 ? atr_value / close : 0
float adx_threshold = adx_threshold_base * (1 + volatility_factor)
bool adx_filter = adx > adx_threshold

// Volumen Relativo
float vol_avg = ta.ema(volume, vol_len)
float vol_relative = vol_avg > 0 ? volume / vol_avg : 0
bool vol_filter = volume > 0 and vol_relative > vol_factor

// Condiciones Específicas Entrada/Salida
float lowest_low_current = ta.lowest(low, entry_lookback) * ex_mult
float lowest_low_prior   = ta.lowest(low[1], entry_lookback)
bool isLowestLowOrPrior = low == lowest_low_current or low[1] == lowest_low_prior
bool isBelowEMA     = close < ema_value
bool isHighestClose = close == ta.highest(close, exit_lookback)
int  barsAboveEMA   = ta.barssince(close <= ema_value)
bool stayedAboveEMA = barsAboveEMA >= exit_ema_bars
bool exit_peak_condition = isHighestClose and stayedAboveEMA

// *** Gestión de Riesgo y Tamaño de Posición ***
equity          = strategy.equity
max_equity_risk = equity * eqty_percent
risk_per_trade  = equity * risk_percent

// Variables para Debug
var float dbg_calc_qty_raw    = na
var float dbg_max_qty_allowed = na
var float dbg_qty_after_min   = na
var float dbg_qty_after_max   = na

// Cálculo de Cantidad
calculated_qty := 0.0
if close > 0
    if eqty_type == 'Porcentaje' // Corregido
        calculated_qty := max_equity_risk / close
    else if eqty_type == 'ATR'
        if initial_sl_dista > 0
            calculated_qty := risk_per_trade / initial_sl_dista
        else
            calculated_qty := max_equity_risk / close
    else
        calculated_qty := min_qty
else
    calculated_qty := 0.0

// Ajustes y Redondeo Final
float qty_after_min = na(calculated_qty) ? na : math.min(calculated_qty, max_equity_risk / close)
float qty_after_max = na(qty_after_min) ? na : math.max(min_qty, qty_after_min)
final_qty           := na(qty_after_max) ? na : lib.round (qty_after_max,6) // Usar mintick

if show_debug_labels
    dbg_calc_qty_raw    := calculated_qty
    dbg_max_qty_allowed := max_equity_risk / close
    dbg_qty_after_min   := qty_after_min
    dbg_qty_after_max   := qty_after_max

// *** GESTIÓN DE TRADE (SL/TP/BE/TSL) ***
float long_be_price      = na
float potential_new_stop = na
bool be_activated_this_bar = false
bool tsl_updated_this_bar = false
float lowest_low_for_tsl = ta.lowest(low, tsl_lookback)

if strategy.position_size > 0
    long_entry_price := strategy.position_avg_price

    // Calcular TP
    if not na(long_entry_price) and long_entry_price > 0 and not na(atr_value) and atr_value > 0
        float tp_atr_distance = atr_value * tp_mult
        tp_atr_distance := math.max(tp_atr_distance, long_entry_price * 0.01)
        long_tp_price := lib.round(long_entry_price + tp_atr_distance, 5)
    else
        long_tp_price := na

    // Calcular Nivel Activación BE
    if not na(long_entry_price) and long_entry_price > 0 and not na(atr_value) and atr_value > 0
        float be_atr_distance = atr_value * be_mult
        be_atr_distance := math.max(be_atr_distance, long_entry_price * 0.005)
        long_be_price := lib.round(long_entry_price + be_atr_distance, 5)
    else
        long_be_price := na

    // Calcular Nivel Potencial TSL (Lógica Unificada)
    potential_new_stop := na
    
    if not na(close) and close > 0 and not na(atr_value) and atr_value > 0
        float tsl_atr_distance = atr_value * trl_mult
        tsl_atr_distance := math.max(tsl_atr_distance, close * 0.005)

        if tsl_method_input == TSL_METHOD_ATR_PRICE
            float base_price = tsl_source == "close" ? close : low
            potential_new_stop := lib.round(base_price - tsl_atr_distance, 5)
        else if tsl_method_input == TSL_METHOD_ATR_LOWEST
            potential_new_stop := lib.round(lowest_low_for_tsl - tsl_atr_distance, 5)
        else if tsl_method_input == TSL_METHOD_PERCENT
            potential_new_stop := lib.round(close * (1 - tsl_percent), 5)

    // Resetear flags
    be_activated_this_bar := false
    tsl_updated_this_bar := false

    // Actualización SL (BE / TSL)
    if not na(long_be_price) and be_mult > 0 and not long_be_active and close > long_be_price
        long_be_active := true
        long_trl_active := true
        if not na(long_entry_price)
            float new_sl = lib.round(long_entry_price, 5)
            if na(long_sl_price) or new_sl != long_sl_price
                long_sl_price := new_sl
                be_activated_this_bar := true

    if long_trl_active and not na(potential_new_stop) and not na(long_sl_price)
        if potential_new_stop > long_sl_price
            long_sl_price := potential_new_stop
            tsl_updated_this_bar := true

// *** CONDICIONES DE ENTRADA ***
// Condición Trigger (Muy Restrictiva - Considera Simplificar)
entry_trigger_condition = isLowestLowOrPrior and initial_sl_dista > 0 and adx_filter and vol_filter and not isBullish and isBelowEMA

// *** LÓGICA DE ENTRADA DIFERIDA ***
// Resetear estado si la señal trigger desaparece
if not entry_trigger_condition
    entrySignalActive := false
    // Mantener barsSinceSignal y lowestSinceSignal para posible re-entrada rápida si aplica

// Activar búsqueda y rastrear mínimo cuando la señal trigger aparece
if entry_trigger_condition and not entrySignalActive // Solo la primera vez
    entrySignalActive := true
    barsSinceSignal := 0 // Resetear contador
    lowestSinceSignal := low // Empezar rastreo

// Si la señal está activa (modo búsqueda/espera)
if entrySignalActive
    barsSinceSignal := barsSinceSignal + 1 // Contar barras
    if na(lowestSinceSignal) or low < lowestSinceSignal // Actualizar mínimo
        lowestSinceSignal := low

// Condición FINAL de Compra (Ejecución)
bool reversalCandle = close > open // Ejemplo: vela verde
bool executeBuy = entrySignalActive and barsSinceSignal >= entry_wait_bars and reversalCandle// Esperar N barras Y ver vela de reversión

// Permiso para Operar (can_trade)
bool qty_is_valid     = not na(final_qty) and final_qty >= min_qty
bool cost_is_valid    = not na(final_qty) and not na(close) and close > 0
float estimated_cost  = cost_is_valid ? lib.round(final_qty * close, 5) : na
bool equity_is_enough = not na(estimated_cost) and equity > estimated_cost
can_trade = strategy.position_size == 0 and qty_is_valid and equity_is_enough

// Ejecutar Entrada
if executeBuy and can_trade
    float entry_price = na
    if order_type == 'limit'
        limit_offset = price_offset_pips * syminfo.mintick
        entry_price := limit_offset == 0 ? close : close - limit_offset
        entry_price := lib.round(entry_price, 5)
    else // Market
        entry_price := na

    float initial_sl_price = na
    if not na(close) and not na(initial_sl_dista)
        float entry_price_estimate = order_type == 'limit' ? entry_price : close
        if not na(entry_price_estimate)
            initial_sl_price := entry_price_estimate - initial_sl_dista
            initial_sl_price := lib.round(initial_sl_price, 5)

    if not na(initial_sl_price)
        strategy.entry("Compra", strategy.long, qty=final_qty, limit=entry_price)
        entrySignalActive := false // Resetear estado DESPUÉS de enviar orden

        if strategy.position_size[1] == 0 // Usar [1] para verificar si NO había posición antes de esta barra
            long_sl_price := initial_sl_price // Asignar SL inicial
            long_tp_price := na
            long_be_active := false
            long_trl_active := false

        // Add alert for entry
        if enable_webhook_alerts and webhook_url != ""
            string entry_alert_message = '{ "symbol": "' + syminfo.tickerid + '", "side": "buy", "qty": ' + str.tostring(final_qty) + ', "type": "' + order_type + '"'
            if order_type == 'limit'
                entry_alert_message += ', "price": ' + str.tostring(entry_price)
            entry_alert_message += ' }'
            alert(entry_alert_message, alert.freq_once_per_bar_close, webhook=webhook_url)

// *** CONDICIONES DE SALIDA ***
// Salida 1: Pendiente por SL/TP/BE/TSL vía strategy.exit
if strategy.position_size > 0 and not na(long_sl_price) and isBullish
    float actual_limit_price = long_trl_active ? na : long_tp_price// TP Condicional
    strategy.exit(id='Venta SL/TP', from_entry='Compra', stop=long_sl_price, limit=actual_limit_price, comment_profit='TP', comment_loss='SL/BE/TSL')

    // Add alert for SL/TP/BE/TSL exit
    if enable_webhook_alerts and webhook_url != ""
        string exit_alert_message = '{ "symbol": "' + syminfo.tickerid + '", "side": "sell", "qty": ' + str.tostring(strategy.position_size) + ', "type": "market", "reason": "SL/TP/BE/TSL" }'
        alert(exit_alert_message, alert.freq_once_per_bar_close, webhook=webhook_url)

// Salida 2: Inmediata por Condición "Peak Exit" vía strategy.close
if strategy.position_size > 0 and exit_peak_condition and not long_trl_active and isBullish
    strategy.close(id='Compra', comment='Peak Exit')

    // Add alert for Peak Exit
    if enable_webhook_alerts and webhook_url != ""
        string peak_exit_alert_message = '{ "symbol": "' + syminfo.tickerid + '", "side": "sell", "qty": ' + str.tostring(strategy.position_size) + ', "type": "market", "reason": "Peak Exit" }'
        alert(peak_exit_alert_message, alert.freq_once_per_bar_close, webhook=webhook_url)

// *** PLOTS PRINCIPALES ***
plot(strategy.position_size > 0 ? long_entry_price : na, title='Precio Entrada', color=color.new(color.blue, 0), style=plot.style_linebr, linewidth=2)
plot(strategy.position_size > 0 ? long_sl_price : na, title='Precio Stop Loss', color=color.new(color.red, 0), style=plot.style_linebr, linewidth=2)
plot(strategy.position_size > 0 and not long_trl_active ? long_tp_price : na, title='Precio Take Profit (Activo)', color=color.new(color.green, 0), style=plot.style_linebr, linewidth=2)
plot(strategy.position_size > 0 and not long_be_active and not na(long_be_price) ? long_be_price : na, title='Nivel Act BE', color=color.new(color.orange, 0), style=plot.style_circles, linewidth=2)

// Resaltar Barra de Ejecución
bgcolor(bgcolor_active and executeBuy and can_trade ? color.new(color.lime, 85) : na)

// --- PLOTEAR FORMAS EN CAMBIOS DE SL ---
plotshape(be_activated_this_bar and show_debug_plots, title="BE Activated", location=location.belowbar, color=color.new(color.orange, 0), style=shape.triangleup, size=size.tiny, text="BE")
plotshape(tsl_updated_this_bar and show_debug_plots, title="TSL Moved", location=location.belowbar, color=color.new(color.blue, 0), style=shape.triangleup, size=size.tiny, text="TSL")

// *** LABELS DE DEBUG (Opcionales) ***
// --- ACTUALIZADOS para Entrada Diferida ---
var label debug_label = na
var label entry_debug = na
if show_debug_labels and barstate.isrealtime == false
    // Label Magenta
    string debug_label_text = ""
    if not na(close)
        float current_cost_dbg = cost_is_valid ? estimated_cost : na
        debug_label_text :=
         "\nclose: " + str.tostring(close) +
         "\nPos size: " + str.tostring(strategy.position_size) +
         "\nEquity: " + str.tostring(lib.round(equity,2)) +
         "\nCost Est: " + str.tostring(current_cost_dbg) +
         "\n--- QTY DEBUG ---" +
         "\nCalc Qty Raw: " + str.tostring(dbg_calc_qty_raw, "#.#######") +
         "\nMax Poss Qty: " + str.tostring(dbg_max_qty_allowed, "#.#######") +
         "\nQty after Min: " + str.tostring(dbg_qty_after_min, "#.#######") +
         "\nQty after Max: " + str.tostring(dbg_qty_after_max, "#.#######") +
         "\nFINAL QTY: " + str.tostring(final_qty) +
         "\n--- END QTY DEBUG ---" +
         "\nmin_qty: " + str.tostring(min_qty) +
         "\nSL Dist: " + str.tostring(lib.round(initial_sl_dista,2)) +
         "\nENTRY TRIGGER: " + str.tostring(entry_trigger_condition) + // Condición inicial
         "\nEXECUTE BUY: " + str.tostring(executeBuy) + // Condición final
         "\nEXIT PEAK: " + str.tostring(exit_peak_condition) +
         "\nADX: " + str.tostring(lib.round(adx,1)) + " > Th: " + str.tostring(lib.round(adx_threshold,1)) + " (" + str.tostring(adx_filter) + ")" +
         "\nVol Rel: " + str.tostring(lib.round(vol_relative,2)) + " > F: " + str.tostring(vol_factor) + " (" + str.tostring(vol_filter) + ")"
    if na(debug_label)
        debug_label := label.new(bar_index, high, debug_label_text, color=color.new(color.purple, 20), style=label.style_label_down, size=size.small, textcolor=color.white, yloc=yloc.abovebar)
    else
        label.set_xy(debug_label, bar_index, high)
        label.set_text(debug_label, debug_label_text)
        label.set_textcolor(debug_label, color.white)

    // Label Verde
    string entry_debug_text =
         "\nLowestLowOrPrior: " + str.tostring(isLowestLowOrPrior) +
         "\nisBullish(HTF): " + str.tostring(isBullish) +
         "\nADX OK: " + str.tostring(adx_filter) +
         "\nVol OK: " + str.tostring(vol_filter) +
         "\nsl_dist>0: " + str.tostring(initial_sl_dista > 0) +
         "\n--- ENTRY LOGIC ---" +
         "\nSignal Active?: " + str.tostring(entrySignalActive) +
         "\nBars Since Sig: " + str.tostring(barsSinceSignal) +
         "\nLowest Since Sig: " + str.tostring(lowestSinceSignal) +
         "\nReversal Candle?: " + str.tostring(reversalCandle) +
         "\nExecute Buy?: " + str.tostring(executeBuy) +
         "\n--- TRADE PERMISSION ---" +
         "\nCAN TRADE: " + str.tostring(can_trade) +
         "\n  qty_valid: " + str.tostring(qty_is_valid) +
         "\n  equity_enough: " + str.tostring(equity_is_enough) +
         "\n--- BE DEBUG ---" +
         "\nBE Price: " + str.tostring(long_be_price) +
         "\nBE Active?: " + str.tostring(long_be_active) +
         "\nClose > BE Price?: " + str.tostring(close > long_be_price) +
         "\n--- PEAK EXIT ---" +
         "\nHighestClose: " + str.tostring(isHighestClose) +
         "\nBarsAboveEMA: " + str.tostring(barsAboveEMA) + " (" + str.tostring(stayedAboveEMA) + ")"
    if na(entry_debug)
        entry_debug := label.new(bar_index, low, entry_debug_text, color=color.new(color.teal, 20), style=label.style_label_up, size=size.small, textcolor=color.white, yloc=yloc.belowbar)
    else
        label.set_xy(entry_debug, bar_index, low)
        label.set_text(entry_debug, entry_debug_text)
        label.set_textcolor(entry_debug, color.white)
else
    label.delete(debug_label)
    label.delete(entry_debug)
    debug_label := na
    entry_debug := na

// EMA Plots
plot(ema_value, title="EMA Corta", color=color.new(color.yellow, 0), linewidth=1)
plot(htfEmaValue, title="EMA HTF (Non-Repaint)", color=color.new(color.aqua, 0), linewidth=1)