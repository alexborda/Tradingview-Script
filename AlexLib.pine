// @version=6
library("AlexLib", overlay = false)

export getDecimals() =>
    math.abs(math.log(syminfo.mintick) / math.log(10))

export getAppropriateDecimals(float val, int minDec = 2, int maxDec = 8) =>
    symDec = int(getDecimals())
    significantDec = 0
    if val != 0
        significantDec := int(math.max(0, -math.floor(math.log10(math.abs(val)))))
    math.min(maxDec, math.max(minDec, math.max(symDec, significantDec)))

export round(float num, int minDec = 2, int maxDec = 8) =>
    dec = getAppropriateDecimals(num, minDec, maxDec)
    mult = math.pow(10, dec)
    math.round(num * mult) / mult

export smartround(float number, int decimals) =>
    float multiplier = math.pow(10, decimals)
    math.round(number * multiplier) / multiplier

export getPercentChange(float val1, float val2, int lookback) => // Renombrado
    vChange = val1 - val2
    vDiff   = vChange - vChange[lookback]
    vChange != 0 ? (vDiff / vChange) * 100 : 0.0 // Evitar división por cero

export countBarsAboveMA(int lookback, float ma) => // Renombrado
    count = 0
    for i = 1 to lookback by 1
        if close[i] > ma[i]
            count := count + 1
    count

export countBarsBelowMA(int lookback, float ma) => // Renombrado
    count = 0
    for i = 1 to lookback by 1
        if close[i] < ma[i]
            count := count + 1
    count

export countPullbackBars(int lookback, int direction) => // Renombrado
    candles = 0
    for i = 1 to lookback by 1
        if direction == 1 and close[i] > open[i]
            candles := candles + 1
        if direction == -1 and close[i] < open[i]
            candles := candles + 1
    candles

export getCandleBodySize() => // Renombrado
    math.abs(close - open) / syminfo.mintick

export getCandleTopWick() => // Renombrado
    math.abs(high - (close > open ? close : open)) / syminfo.mintick

export getCandleBottomWick() => // Renombrado
    math.abs((close < open ? close : open) - low) / syminfo.mintick

export getCandleBodyPercent() => // Renombrado
    totalRange = math.abs(high - low)
    totalRange > 0 ? math.abs(open - close) / totalRange : 0.0 // Evitar división por cero

export isBullishEngulfing(float allowance = 0.0, float maxRejectionWickPct = 0.0, bool engulfWick = false) => // Renombrado
    bodySize = getCandleBodySize() * syminfo.mintick // Convertir a valor de precio para comparación
    rejectionOk = maxRejectionWickPct == 0.0 or (bodySize > 0 and (getCandleTopWick() * syminfo.mintick) / bodySize < maxRejectionWickPct)
    (close[1] <= open[1] and close >= open[1] and open <= close[1] + allowance * syminfo.mintick) and 
     (not engulfWick or close >= high[1]) and 
     rejectionOk

export isBearishEngulfing(float allowance = 0.0, float maxRejectionWickPct = 0.0, bool engulfWick = false) => // Renombrado
    bodySize = getCandleBodySize() * syminfo.mintick
    rejectionOk = maxRejectionWickPct == 0.0 or (bodySize > 0 and (getCandleBottomWick() * syminfo.mintick) / bodySize < maxRejectionWickPct)
    (close[1] >= open[1] and close <= open[1] and open >= close[1] - allowance * syminfo.mintick) and 
     (not engulfWick or close <= low[1]) and 
     rejectionOk

export calcTP(float entry, float atrVal, float tpMult, int minDec = 2, int maxDec = 5) => // Renombrado y precisión fija para precios
    float tpPrice = na
    if not na(entry) and entry > 0 and not na(atrVal) and atrVal > 0
        tpDist = atrVal * tpMult
        tpDist := math.max(tpDist, entry * 0.01)
        tpPrice := round(entry + tpDist, minDec, maxDec) // Usa la función round de esta librería
    tpPrice

<<<<<<< HEAD
export calcBELevel(float entry, float atrVal, float beMult,int minDec=2, int maxDec = 5) => // Renombrado y precisión fija
=======
export calcBELevel(float entry, float atrVal, float beMult, int maxDec = 5) => // Renombrado y precisión fija
>>>>>>> 72ab00867b843f67a1daf66a4caf8b49ff94ccf5
    float bePrice = na
    if not na(entry) and entry > 0 and not na(atrVal) and atrVal > 0
        beDist = atrVal * beMult
        beDist := math.max(beDist, entry * 0.005)
<<<<<<< HEAD
        bePrice := round(entry + beDist, minDec, maxDec)
        
    bePrice

export calcTSL(float currentPx, float atrVal, float tslMult, string tslMethod, string tslSrc, float lrTsl, float tslPctVal, float trendSlp,int minDec=2, int maxDec = 5) =>
=======
        //bePrice := round(entry + beDist, minDec, maxDec)
        bePrice := smartround(entry + beDist, maxDec)
    bePrice

export calcTSL(float currentPx, float atrVal, float tslMult, string tslMethod, string tslSrc, float lrTsl, float tslPctVal, float trendSlp, int maxDec = 5) =>
>>>>>>> 72ab00867b843f67a1daf66a4caf8b49ff94ccf5
    float tslPrice = na
    if not na(currentPx) and currentPx > 0 and not na(atrVal) and atrVal > 0
        sensitivity = 1.0
        adjTslMult = tslMult
        adjTslPct = tslPctVal

        if not na(trendSlp)
            adjTslMult := tslMult * math.max(0.5, 1 - math.abs(trendSlp) * sensitivity) 
            adjTslPct  := tslPctVal * math.max(1.0, 1 + math.abs(trendSlp) * sensitivity)
        
        tslAtrDist = atrVal * adjTslMult
        tslAtrDist := math.max(tslAtrDist, currentPx * 0.005)

        if tslMethod == "ATR (desde Precio)"
            basePx = tslSrc == "close" ? close : low
            //tslPrice := round(basePx - tslAtrDist, minDec, maxDec)
            tslPrice := smartround(basePx - tslAtrDist, maxDec)
        else if tslMethod == "ATR (desde Mínimo Reciente)"
            if not na(lrTsl) // Asegurar que lrTsl (antes lrTslValue) es válido
                //tslPrice := round(lrTsl - tslAtrDist, minDec, maxDec)
                tslPrice := smartround(lrTsl - tslAtrDist, maxDec)
        else if tslMethod == "Porcentaje (desde Cierre)"
            //tslPrice := round(currentPx * (1 - adjTslPct), minDec, maxDec)
            tslPrice := smartround(currentPx * (1 - adjTslPct), maxDec)
    tslPrice

export calcPosSize(float equity, float equityPctToUse, series float closePx, float minQtyVal, float slDistVal = na, float riskPctToUse = na, string qtyType = "Porcentaje", int qtyPrecDec = -1) => // Renombrado
    posQty = 0.0
    maxEquityRisk = equity * equityPctToUse
    
    if closePx > 0
        if qtyType == "Porcentaje"
            posQty := maxEquityRisk / closePx
        else if qtyType == "ATR"
            if not na(slDistVal) and slDistVal > 0 and not na(riskPctToUse)
                riskAmtTrade = equity * riskPctToUse
                posQty := riskAmtTrade / slDistVal
            else
                posQty := maxEquityRisk / closePx // Fallback
        else
            posQty := minQtyVal // Fallback tipo inválido

    qtyAfterMaxLimit = na(posQty) ? na : math.min(posQty, maxEquityRisk / closePx)
    qtyAfterMinLimit = na(qtyAfterMaxLimit) ? na : math.max(minQtyVal, qtyAfterMaxLimit)

    float finalPosQty = na
    if not na(qtyAfterMinLimit)
        if qtyPrecDec == -1
            //finalPosQty := math.round_to_mintick(qtyAfterMinLimit)
            finalPosQty := smartround(qtyAfterMinLimit,5)
        else
            //finalPosQty := round(qtyAfterMinLimit, qtyPrecDec, qtyPrecDec)
            finalPosQty := smartround(qtyAfterMinLimit, qtyPrecDec)
    finalPosQty

export validateADX(float currentADX, float atrVal, series float closePrice, float adxThreshold, bool useFilter = true) => // Renombrado
    passes = true
    if useFilter
        volFactor = closePrice > 0 ? atrVal / closePrice : 0
        dynamicADX = adxThreshold * (1 + volFactor)
        passes := not na(currentADX) and not na(dynamicADX) and currentADX > dynamicADX
    passes

export validateVolume(series float vol, float volAvgLen, float volFactorVal, bool useFilter = true) => // Renombrado
    passes = true
    volMA = ta.ema(vol, int(volAvgLen)) // Asegurar que volAvgLen es int
    if useFilter
        float volRel = volMA > 0 ? vol / volMA : 0
        passes := vol > 0 and not na(volRel) and volRel > volFactorVal
    passes

export validateLR(series float src, int len, bool useFilter = true) => // Nombre cambiado
    float lrVal = ta.linreg(src, len, 0)
    float lrSlope = 0.0
    passes = true // El filtro pasa por defecto

    if useFilter
        if len > 1 and not na(src) and not na(lrVal)
            if not na(lrVal[1]) // Solo necesitamos el valor anterior para la pendiente
                lrSlope := lrVal - lrVal[1]
                passes := lrSlope > 0 // Pasa si la pendiente es alcista
            else
                passes := false // No se pudo calcular pendiente
        else
            passes := false // Longitud inválida o 'src' es na
    
    [passes, lrSlope]